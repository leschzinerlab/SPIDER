;This batch will take a given set of normalized class averages and any number of 3D models and calculate the cross correlation & euler angle assignment of each class average with each model.

;;;;;;;;;;;;;;;;;;;;;;;;

FR
?Input normalized stack of class avgs? <stack>

RR [numParts]
?Number of class averages to be match?

RR [numRefs]
?Number of 3D models? 

FR 
?Base name for normalized 3D models (ie volumes001)? <model>

RR [boxSize]
?Box size?

RR [angStep]
?Angular step for projecting 3D models? 

FR
?Output folder? <output>

;;;;;;;;;;;;;;;;;;;;;;;;;

MD
SET MP
(0)

;Set variables:

[radius]=[boxSize]/2
[imageCenter]=(INT([boxSize]/2)+1)
[allowedShift]=0.15*[boxSize]
[thetaMin]=0
[thetaMax]=90
[psiMin]=0
[psiMax]=359.9

VM
mkdir <output>

;;;;;;;;;;;;;;;Normalize class avgs;;;;;;;;;;;;;;

do lb10 [avgs]=1,[numParts]
	
	FS [max] [min] [avg] [std]
	<stack>@{******[avgs]}
		
	AR
	<stack>@{******[avgs]}
	<output>/parts_norm@{******[avgs]}
	(P1-[avg])/[std]

lb10

;;;;;;;;;;;;;;;;;SET ANGULAR STEP HERE!!;;;;;;;;;;;;;;;;;

VO EA [numAngles]		; generate angular file
([angStep])
([thetaMin],[thetaMax])
([psiMin],[psiMax])
<output>/angles

;;;;;;;;;;;;;;;;;;;;;;;Projection matching;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

do lb2 [currentRef]=1,[numRefs]		; for each reference volume

	;;;;;;;;;;;;;;;;;Create projections of the model;;;;;;;;;;;;
	
	PJ 3Q				; project ref according to angular file
	<model>{***[currentRef]}		; proj last reference
	([boxSize]/2)
	(1-[numAngles])
	<output>/angles
	<output>/proj_<model>{***[currentRef]}@*****
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	;;;;;;;;Normalize projects;;;;;;;;;;;;;

	do lb5 [proj]=1,[numAngles]

		FS [max] [min] [avg] [std]
		<output>/proj_<model>{***[currentRef]}@{*****[proj]}
		
		AR
		<output>/proj_<model>{***[currentRef]}@{*****[proj]}
		<output>/proj_<model>_{***[currentRef]}_norm@{*****[proj]}
		(P1-[avg])/[std]

	lb5
	
	;;;;;;;;;;;;;;;;;Compare particles to projections of the model;;;;;;;;;;;;;;;;;;
	
	AP SH				; HUGE function.  Is the heart of proj matching.  Compares parts to ref
	<output>/proj_<model>{***[currentRef]}@*****
	(1-[numAngles])
	([boxSize]*0.0625,2)		; allow shift up to ~1/20 box size at one pixel intervals (can edit this!)
	(1,[boxSize]*0.3,1,1)		; allow rings from center to 90% of box to be used for rotational alignment
	<output>/angles	; angles of the reprojections
	<stack>@******			; particles to be matched
	(1-[numParts])			; number of particles
	*				; can include previous alignment params here to limit search
	(0.0,0.0)			; amount to restrict
	(1)				; check mirrors
	<output>/apsh_<model>{***[currentRef]}		; AP SH output text file with all alignment info
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                			;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    Calculate & apply shifts to particles     	;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    for back projection                		;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
		;cross correlation will be used to center the particles relative to the projected reference.
		;Based on the cross correlation, the shifts for each particle will be calculated
		;and can then be applied prior to back projection
	
						; [avgCC] - average correlation coefficient. 
	[avgCC]=0.0                        	;This is set to zero, but will be added to at the end of the master loop
	
	
	;;;;;;;;;;;;;;;;
	;;;;;;;;;;;;;;;;        Step 1:  Prepare reference projection & particle
	;;;;;;;;;;;;;;;;
	
	
	DO LB99 [particle]=1,[numParts]           
	
		UD IC [particle],[psi],[theta],[phi],[matchedProj],[expNum],[cumPsi],[cumX],[cumY],[numSearched],[angChange],[CC],[curPsi],[curX],[curY],[Mir]   
		<output>/apsh_<model>{***[currentRef]}
		
		[curPsi]=-[curPsi]                    		;Since the rotangle is calculated for the particle, its sign
								;must be inverted to properly rotate the reference proj.
		
		;When particles best align to a mirrored projection of a reference, it is indicated by a negative value in front of
		;the ref proj number. When [Mir] is negative, the particle was best aligned to the mirrored reference.
		
		IF([Mir].GT.0) GOTO LB61                	;see previous comment
		
									; The following steps are applied to the mirrored references.  It should be noted that mirroring is equivalent
									;to a rotation greater than 90
			
			MR                            			;mirror image command
			<output>/proj_<model>{***[currentRef]}@{*****[matchedProj]}        ;selects input reference projection
			_3                            			;temporary output image
			Y                            			;mirrors across Y axis
			
			;now that the reference projection has been mirrored appropriately, it will be rotated to be aligned to the
			;particles.  Note that it is not shifting the reference, only rotating it.
			
			RT SQ                            		;rotate and shift image       
			_3                            			;temporary output from the mirroring command previous
			_2                            			;output – rotated reference projection
			[curPsi]                        		;rotation angle
			(0,0)                            		;no shifting!
			
			goto LB62
		
		LB61
		;for particles that did not align to the mirrored reference, the reference is simply rotated (like above)
		
		RT SQ                            		;rotate and shift image
		<output>/proj_<model>{***[currentRef]}@{*****[matchedProj]}        	;input reference projection
		_2                            			;output – rotated reference projection
		[curPsi]                        		;rotation angle
		(0,0)                            		;no shifting!
		
		
		LB62
		
		;Now we have the reference projection correctly rotated and mirrored (if necessary) and we will prepare it for
		;alignment to the particle
		
		MA                                		;mask image
		_2                                		;reference projection
		_3                                		;output – masked reference projection
		[radius]                            		;radius of mask
		D                                		;shape of mask:  D=disc
		E                                		;choice of mask pixels: E=externally determined
		(0)                                		;value for mask pixels, the “externally determined” value
		[imageCenter],[imageCenter]                	;center coordinates for mask
		
		;The masked reference projection will now be padded with extra pixels, making it twice the box size
		
		PD                                		;pad image
		_3                                		;input – masked reference projection
		_2                                		;output – padded, masked, reference projection
		([boxSize]*2),([boxSize]*2)                    	;dimensions of padding
		N                                		;Average?  Ans: N – no.  Value will be inputted below
		(0.000E+00)                            		;value of padded pixels
		(1,1)                                		;top left coordinates:  not sure why the image is placed in the top
								;left corner instead of the middle of the padded image
		
		;The unfiltered particle will also be padded before alignment to reference
		
		CP                                		;copy image
		<stack>@{******[particle]}                    	;retrieve particle from stack
		_3                                		;output – unfiltered particle from stack
		
		PD                                		;pad image
		_3                                		;input – unfiltered particle from stack
		_1                                		;output – padded unfiltered particle from stack
		([boxSize]*2),([boxSize]*2)                  	;dimensions of padding
		B                                		;B(order) – background value will be equal to avg. pixel value
		(1,1)                                		;top left corner coordinates:  still not sure about it.
		
		;;;;;;;;;;;;;;;;;;
		;;;;;;;;;;;;;;;;;;
		;;;;;;;;;;;;;;;;;;    Step 2:  Cross correlate the particle and reference projection
		;;;;;;;;;;;;;;;;;;
		
		CC N                                		;calculate a normalized cross correlation image
		_1                               		;input – padded unfiltered particle
		_2                                		;ref input – padded, masked, reference projection
		_1                                		;output – replaces the input with the cross correlation image
		
		;The cross correlation image contains peak(s) corresponding to the X & Y shifts necessary to align the particle to
		;the reference.  We need to read off this peak with the X&Y coordinates, and the coordinates will be shifts.
		
		WI                                		;Window command
		_1                                		;input – cross correlation output from CC N
		_2                                		;output – a larger box size
		(([allowedShift]*2)+1),(([allowedShift]*2)+1)      ;new window size
		([boxSize]-[allowedShift]+1),([boxSize]-[allowedShift]+1)  ;new top left coordinates
		
		;Peak search (PK) is now performed on the windowed cross correlation image so that the X & Y coordinates correspond
		;to X & Y shifts.
		
		PK [PK_X],[PK_Y],[PK_value],[PK_ratio],[PK_coords_X],[PK_coords_Y],[PK_coords_max]
		_2                                		;input – windowed cross correlation image
		(0)                                		;number of peaks
		
		; In case there was no peak found for translation, the peak value [PK_coords_max] is 0.
		; In this case get a value at the origin of the CCF and store in in shift document file.
		; This value is needed for sorting and calculation of the average correlation coeff.
		
		IF([PK_coords_max].EQ.0.0) THEN            	;If the value of the max peak equal zero, get the origin pixel
								;intensity
			GP [PK_coords_max]                	;get pixel value command
			_2                            		;input – windowed cross correlation image
			([allowedShift]+1),([allowedShift]+1)   ;center coordinates
			
			;Since there were no peaks found, the particle does not need to be shifted.  Therefore, the unshifted
			;unfiltered particle is copied into the shifted particle stack
			
			CP                            		;copy
			_3                            		;input – unfiltered particle from stack
			<output>/parts_shifted_<model>{***[currentRef]}@{******[particle]}            ;output – new shifted stack
			
		ELSE                                		;for all other particles that need to be shifted
		
			SH F                            		;shift image using fourier interpolation (accurate!)
			_3                            			;input – unfiltered particle from stack
			<output>/parts_shifted_<model>{***[currentRef]}@{******[particle]}        	;output – placement into new shifted particle stack
			-[PK_coords_X],-[PK_coords_Y]            	;coordinates from PK used to shift the particles.  Note that the
									;sign is negative (spider convention)
		
		ENDIF
		
		;The final step is to start a running count of the correlation coefficients.  Initially, the [avgCC] is equal to
		;zero, but all of the new CC values are added together to get the total sum of cross correlation values.
		
		[avgCC]=[avgCC]+[PK_coords_max]
		
		;This will output the shift parameters
		
		SD [particle],[PK_coords_X],[PK_coords_Y],[PK_coords_max]
		<output>/shifts_<model>{***[currentRef]}

	LB99                                    				;end of the loop for each particle


	UD ICE 
	<output>/apsh_<model>{***[currentRef]}
	
;Calculate the average cross correlation coefficient by dividing the total cross correlation value by the number of
	;particles
	
	[avgCC]=[avgCC]/[numParts]
	
	SD -1,[avgCC]                            			;this saves the [avgCC] value as a comment in the last line
	<output>/shifts_<model>{***[currentRef]}			;of the shifts file using 1 register (column)
	
	SD E                                    			;closes the shifts file
	<output>/shifts_<model>{***[currentRef]}
	
	; remove inline files
	DE
	_1
	
	DE
	_2
	
	DE
	_3

lb2								;end of loop for each reference

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;; Generate outputs! 	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
;The outputs from this are going to compare the CC values of each particles for each model, and then will copy the class average followed by 
;the best matching model, second best matching, etc. in a row within the stack.  This will be repeated for each particle.

;There will also be an output file that has the value of cross correlation of a given particle for each model:

;	Particle # 	Model_1_CC	Model_2_CC	(etc.)  		

; The final output file will output the corresponding CCs & Euler angles of the best matching views:

;	Particle # 	Best_matching_model_CC	Best_matching_model_psi		Best_matching_model_theta	Best_matching_model_phi 	Second_best_etc. etc. etc.


SD IC NEW
incore_model_assignment
8,[numParts]

SD IC NEW
incore_model_1
4,[numParts]

SD IC NEW
incore_model_2
4,[numParts]

SD IC NEW
incore_angle_distance
1,[numParts]

MS
_3@
[boxSize] [boxSize] 1 
([numParts]*2)

MS
_9@
[boxSize] [boxSize] 1 
([numParts]*3)

[count]=1
[num]=1

do lb1 [particle]=1,[numParts]			;loop over particles
	
	[match]=0
	[modelAssign]=0
	
	do lb6 [ref]=1,[numRefs]		;loop over references

		UD IC [particle],[shiftX],[shiftY],[CC_NormMax]
		<output>/shifts_<model>{***[ref]}

		IF([CC_NormMax].GT.[match]) THEN
	
			[match]=[CC_NormMax]
			[modelAssign]=[ref]

		ENDIF

	lb6

	UD IC [particle],[shiftX],[shiftY],[CC_Norm1]
	<output>/shifts_<model>001
	
	UD IC [particle],[shiftX],[shiftY],[CC_Norm2]
	<output>/shifts_<model>002
	
	UD IC [particle] [psi1] [theta1] [phi1] [matchedProj1] [expNum] [cumPsi] [cumX] [cumY] [numSearched] [angChange] [CC] [curPsi] [curX] [curY] [Mir]
	<output>/apsh_<model>001

	UD IC [particle] [psi2] [theta2] [phi2] [matchedProj2] [expNum] [cumPsi] [cumX] [cumY] [numSearched] [angChange] [CC] [curPsi] [curX] [curY] [Mir]
	<output>/apsh_<model>002

	[x1]=cos([phi1])*sin([theta1])
	[y1]=sin([phi1])*sin([theta1])
	
	[x12]=[x1]*[x1]
	[y12]=[y1]*[y1]
	
	[z1]=1-([x12])-([y12])
	
	IF([z1].LT.0)THEN
			
		[z1]=0
	
	ENDIF
	
	[z1]=SQRT([z1])

	[x2]=cos([phi2])*sin([theta2])
	[y2]=sin([phi2])*sin([theta2])
	
	[x22]=[x2]*[x2]
	[y22]=[y2]*[y2]
	
	[z2]=1-([x22])-([y22])
	
	IF([z2].LT.0)THEN
			
		[z2]=0
	
	ENDIF
	
	[z2]=SQRT([z2])

	SD IC [particle] [match] [modelAssign] [CC_Norm1] [CC_Norm2] 
	incore_model_assignment
	
	SD IC [particle] [matchedProj1] [x1] [y1] [z1]
	incore_model_1

	SD IC [particle] [matchedProj2] [x2] [y2] [z2]
	incore_model_2

	UD ICE
	<output>/shifts_<model>001

	UD ICE
	<output>/shifts_<model>002

	UD ICE
	<output>/apsh_<model>001

	UD ICE
	<output>/apsh_<model>002

	UD IC [particle] [psi] [theta] [phi] [matchedProj] [expNum] [cumPsi] [cumX] [cumY] [numSearched] [angChange] [CC] [curPsi] [curX] [curY] [Mir]
	<output>/apsh_<model>{***[modelAssign]}
	
	RT SQ
	<stack>@{*****[particle]}
	_1
	[curPsi],1
	[curX],[curY]
	
	IF([Mir].LT.0)THEN
			
		MR
		_1
		_2
		Y
			
		CP 
		_2
		_1
		
	ENDIF
		
	[next]=[count]+1

	CP
	_1
	_3@{*****[count]}
	
	CP
	<output>/proj_<model>{***[modelAssign]}@{*****[matchedProj]}
	_3@{*****[next]}
	
	[count]=[count]+2
	
	DE
	_1
	
	DE
	_2

	UD ICE
	<output>/apsh_<model>{***[modelAssign]}

	;Shift & rotate the three model projections relative to the particle and put them in their own stack
	
	UD IC [particle] [psi] [theta] [phi] [matchedProj1] [expNum] [cumPsi] [cumX] [cumY] [numSearched] [angChange] [CC] [curPsi1] [curX1] [curY1] [Mir1]
	<output>/apsh_<model>001

	UD IC [particle] [psi] [theta] [phi] [matchedProj2] [expNum] [cumPsi] [cumX] [cumY] [numSearched] [angChange] [CC] [curPsi2] [curX2] [curY2] [Mir2]
	<output>/apsh_<model>002

	[num2]=[num]+1	

	CP
	<output>/proj_<model>001@{*****[matchedProj1]}
	_9@{*****[num]}

	CP
	<output>/proj_<model>002@{*****[matchedProj2]}
	_9@{*****[num2]}	

	[num]=[num]+2


	UD ICE 
	<output>/apsh_<model>001

	UD ICE
	<output>/apsh_<model>002

	
lb1

	
SD IC COPY
incore_model_1
<output>/model_1_assignment

SD IC COPY
incore_model_2
<output>/model_2_assignment

SD IC COPY
incore_model_assignment
<output>/model_assignment_tmp

CP 
_3@
<output>/aligned_avgs_model@

CP
_9@
<output>/matching_projections@

SD IC NEW
incore_final_assignment
8,[numParts]

do lb69 [part]=1,[numParts]
		
		UD IC [part] [X1] [Y1] [Z1]
		<output>/model_1_assignment
		
		UD IC [part] [X2] [Y2] [Z2]
		<output>/model_2_assignment
		
		VO IA [inc_angle1_2]
		[X1],[Y1],[Z1]
		[X2],[Y2],[Z2]

		UD IC [part] [match] [modelAssign] [CC_Norm1] [CC_Norm2]
		<output>/model_assignment_tmp

		SD IC [part] [match] [modelAssign] [CC_Norm1] [CC_Norm2] [inc_angle1_2] 	
		incore_final_assignment

		UD ICE
		<output>/model_assignment_tmp	

		UD ICE 
		<output>/model_1_assignment

		UD ICE 
		<output>/model_2_assignment

		
lb69

DE
<output>/model_assignment_tmp

DE
<output>/model_1_assignment

DE
<output>/model_2_assignment


SD IC COPY
incore_final_assignment
<output>/model_assignment


en
